import pandas as pd
import numpy as np

def get_pitch_location_vulnerability(pitcher_statcast, prediction_date='2025-05-15'):
    """Identify pitch zones vulnerable to HRs."""
    pitcher_statcast = pitcher_statcast.copy()
    pitcher_statcast['game_date'] = pd.to_datetime(pitcher_statcast['game_date'])
    prediction_date = pd.to_datetime(prediction_date)
    pitcher_statcast['time_weight'] = np.exp(-(prediction_date - pitcher_statcast['game_date']).dt.days / 365)
    
    # Group zones into broader regions (e.g., high/middle/low, in/middle/out)
    pitcher_statcast['zone_region'] = pitcher_statcast['zone'].map({
        1: 'High-In', 2: 'High-Middle', 3: 'High-Out',
        4: 'Middle-In', 5: 'Middle-Middle', 6: 'Middle-Out',
        7: 'Low-In', 8: 'Low-Middle', 9: 'Low-Out',
        11: 'Outside', 12: 'Outside', 13: 'Outside', 14: 'Outside'
    }).fillna('Outside')
    
    total_pitches = pitcher_statcast.groupby(['zone_region', 'batter_hand']).agg({
        'time_weight': 'sum'
    }).rename(columns={'time_weight': 'total_weighted_pitches'})
    hr_pitches = pitcher_statcast[pitcher_statcast['events'] == 'home_run'].groupby(['zone_region', 'batter_hand']).agg({
        'time_weight': 'sum'
    }).rename(columns={'time_weight': 'hr_weighted_count'})
    
    hr_rate = (hr_pitches['hr_weighted_count'] / total_pitches['total_weighted_pitches']).fillna(0).reset_index(name='Zone_HR_Rate')
    vulnerable_zones = hr_rate[hr_rate['Zone_HR_Rate'] > 0.05][['zone_region', 'batter_hand']]
    
    # Ensure at least one zone per handedness to avoid empty results
    if vulnerable_zones.empty:
        vulnerable_zones = pd.DataFrame({
            'zone_region': ['Middle-Middle'],
            'batter_hand': ['R']
        })
    
    return vulnerable_zones